#include "Fields.h"

Fields::Fields()
{
	grass();
}

void Fields::grass()
{
	if (!this->textureSet.loadFromFile("Assets/map_texture.png"))
	{
		std::cout << "error";
	}
}

void Fields::grassMap(sf::RenderWindow& myMap)
{
	int posX;
	int posY;

	const int map[mapRow][mapColumn] =
	{
		{1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 4, 5, 6, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 9, 10, 11, 11, 12, 13, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 14, 15, 15, 15, 16, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 21, 22, 22, 22, 23, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 24, 25, 26, 22, 23, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 24, 25, 27, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 28, 8, 8, 29, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 28, 8, 8, 8, 8, 29, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 28, 8, 8, 8, 8, 8, 8, 29, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 28, 30, 31, 31, 31, 31, 31, 31, 30, 29, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 32, 28, 30, 30, 33, 34, 34, 34, 34, 35, 30, 30, 29, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{30, 30, 30, 30, 30, 30, 36, 37, 38, 38, 38, 38, 39, 40, 30, 30, 30, 30, 30, 30, 41, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 49, 48, 48, 48, 48, 48, 48, 48, 448, 48, 48, 48, 48, 48, 48, 50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 47, 42, 42, 42, 42, 42, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 44, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 31, 31, 31, 31, 31, 31, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 33, 34, 34, 34, 34, 35, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 37, 38, 38, 38, 38, 39, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
	};

	for (int row = 0; row < mapRow; row++)
	{
		for (int column = 0; column < mapColumn; column++)
		{
			if (map[row][column] == 1)
			{
				posX = 128;
				posY = 720;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 2)
			{
				posX = 176;
				posY = 656;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 3)
			{
				posX = 208;
				posY = 1600;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 4)
			{
				posX = 224;
				posY = 1600;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 5)
			{
				posX = 240;
				posY = 1600;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 6)
			{
				posX = 192;
				posY = 656;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 7)
			{
				posX = 160;
				posY = 912;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 8)
			{
				posX = 272;
				posY = 1680;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 9)
			{
				posX = 176;
				posY = 672;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 10)
			{
				posX = 208;
				posY = 1664;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 11)
			{
				posX = 224;
				posY = 1664;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 12)
			{
				posX = 240;
				posY = 1664;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 13)
			{
				posX = 192;
				posY = 672;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 14)
			{
				posX = 256;
				posY = 464;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 15)
			{
				posX = 272;
				posY = 464;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 16)
			{
				posX = 288;
				posY = 464;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 17)
			{
				posX = 256;
				posY = 1040;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 18)
			{
				posX = 320;
				posY = 1152;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 19)
			{
				posX = 304;
				posY = 1152;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 20)
			{
				posX = 320;
				posY = 1056;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 21)
			{
				posX = 256;
				posY = 480;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 22)
			{
				posX = 272;
				posY = 480;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 23)
			{
				posX = 288;
				posY = 480;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 24)
			{
				posX = 256;
				posY = 496;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 25)
			{
				posX = 272;
				posY = 496;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 26)
			{
				posX = 320;
				posY = 480;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 27)
			{
				posX = 288;
				posY = 496;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 28)
			{
				posX = 272;
				posY = 1104;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 29)
			{
				posX = 256;
				posY = 1104;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 30)
			{
				posX = 144;
				posY = 928;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 31)
			{
				posX = 144;
				posY = 1120;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 32)
			{
				posX = 320;
				posY = 1632;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 33)
			{
				posX = 144;
				posY = 592;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 34)
			{
				posX = 160;
				posY = 592;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 35)
			{
				posX = 176;
				posY = 592;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 36)
			{
				posX = 128;
				posY = 1152;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 37)
			{
				posX = 144;
				posY = 608;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 38)
			{
				posX = 160;
				posY = 608;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 39)
			{
				posX = 176;
				posY = 608;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 40)
			{
				posX = 192;
				posY = 1152;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 41)
			{
				posX = 160;
				posY = 928;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 42)
			{
				posX = 272;
				posY = 32;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 43)
			{
				posX = 288;
				posY = 32;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 44)
			{
				posX = 320;
				posY = 32;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 45)
			{
				posX = 256;
				posY = 16;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 46)
			{
				posX = 288;
				posY = 16;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 47)
			{
				posX = 304;
				posY = 16;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 48)
			{
				posX = 272;
				posY = 0;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 49)
			{
				posX = 256;
				posY = 0;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (map[row][column] == 50)
			{
				posX = 288;
				posY = 0;
				this->sprite.setTexture(this->textureSet);
				this->sprite.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}

			this->sprite.setPosition(column * tileWidth, row * tileHeight);

			myMap.draw(this->sprite);
		}
	}
}

void Fields::dirtMap(sf::RenderWindow& myWallMap)
{
	int posX;
	int posY;

	const int mapWall[mapRow][mapColumn]{
		{674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 0, 0, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 0, 0, 0, 0, 618, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 0, 0, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 0, 0, 0, 0, 0, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1631, 1632, 0, 0, 0, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1687, 1688, 0, 0, 0, 0, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6497, 6498, 6498, 6498, 6498, 6502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2828, 2829, 2830, 2831, 2832},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 562, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 562, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{3218, 3219, 3218, 3219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 562, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{3274, 3275, 3274, 3275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 562, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{3330, 3331, 3330, 3331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 562, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2828, 2829, 2830, 2831, 2832},
		{6497, 6498, 6498, 6498, 6498, 6502, 0, 0, 0, 0, 0, 0, 0, 562, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 562, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 2828, 2829, 2828, 2829, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2193, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 957, 958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2830, 2831, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2828, 2829, 2830, 2831, 2832},
		{674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 0, 562, 562, 562, 1016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{674, 674, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 0, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{674, 674, 674, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 0, 0, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6497, 6498, 6498, 6498, 6498, 6498, 6502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2828, 2829, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2828, 2829, 2830, 2831, 2832},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 6497, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2828, 2829, 2772, 2773, 2774, 2775, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 2828, 2829, 2718, 2719, 2720, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2716, 2717, 2718, 2719, 2720},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1631, 1632, 0, 0, 0, 0, 0, 0, 2249, 0, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 16, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 2828, 2829, 2776, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2772, 2773, 2774, 2775, 2776},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1687, 1688, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2832, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2828, 2829, 2830, 2831, 2832},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2828, 2829, 0, 0, 2828, 2829, 0, 0, 2828, 2829, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6502},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2305, 2306, 2306, 2306, 122, 122, 122, 122, 122, 122, 122, 16, 0, 0, 0, 0, 0, 65, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 65, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 65, 0, 0, 0, 67, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 121, 122, 122, 122, 123, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{65, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 562, 562, 0, 1631, 1632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1631, 1632, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 0, 1687, 1688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1687, 1688, 0, 0, 0, 0, 0, 0, 0, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{65, 0, 9, 10, 10, 10, 10, 10, 11, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{65, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 562, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7011, 0, 0, 0, 6953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{65, 0, 65, 0, 0, 0, 66, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 618, 618, 562, 0, 0, 0, 0, 0, 0, 0, 0, 7067, 0, 0, 7011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{65, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 618, 618, 618, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 0, 0, 0, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 65, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 67, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7011, 0, 0, 0, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 9, 10, 10, 10, 10, 10, 11, 0, 0, 0, 67, 0, 0, 0, 65, 0, 9, 10, 10, 10, 10, 10, 11, 0, 0, 0, 67, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7067, 0, 0, 0, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 65, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 7011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 65, 0, 0, 0, 66, 0, 67, 0, 0, 0, 67, 0, 0, 0, 65, 0, 65, 0, 0, 0, 66, 0, 67, 0, 0, 0, 67, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0},
		{10, 10, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 7067, 0, 0, 0, 0, 0, 0, 0, 7011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 65, 0, 65, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{122, 122, 122, 122, 122, 122, 122, 122, 123, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 10, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 9, 10, 10, 10, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 11, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 0, 0, 0, 65, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 122, 122, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 122, 122, 122, 122, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 123, 122, 122, 122, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{618, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 674, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6498, 6502, 0, 0, 0, 0, 0, 0, 0},
		{618, 618, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 618, 618, 0, 0, 0, 0, 7011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7011, 0, 0, 0, 0, 0, 0, 6953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 0, 0, 618, 618, 618, 618, 0, 0, 0, 0, 7067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 674, 674, 674, 674, 0, 0, 0, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	};
	for (int row = 0; row < mapRow; row++)
	{
		for (int column = 0; column < mapColumn; column++)
		{
			if (mapWall[row][column] == 674)
			{
				posX = 16;
				posY = 192;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 65)
			{
				posX = 128;
				posY = 16;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 649)
			{
				posX = 512;
				posY = 176;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 705)
			{
				posX = 512;
				posY = 192;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 7011)
			{
				posX = 160;
				posY = 2000;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 7067)
			{
				posX = 160;
				posY = 2016;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 6953)
			{
				posX = 128;
				posY = 1984;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 10)
			{
				posX = 144;
				posY = 0;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 16)
			{
				posX = 240;
				posY = 0;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 66)
			{
				posX = 144;
				posY = 16;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2305)
			{
				posX = 128;
				posY = 656;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2306)
			{
				posX = 144;
				posY = 656;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 121)
			{
				posX = 128;
				posY = 32;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 123)
			{
				posX = 160;
				posY = 32;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 122)
			{
				posX = 144;
				posY = 32;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 67)
			{
				posX = 160;
				posY = 16;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 11)
			{
				posX = 160;
				posY = 0;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2194)
			{
				posX = 144;
				posY = 624;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2193)
			{
				posX = 128;
				posY = 624;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2249)
			{
				posX = 128;
				posY = 640;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 9)
			{
				posX = 128;
				posY = 0;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 618)
			{
				posX = 16;
				posY = 176;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 0)
			{
				posX = 544;
				posY = 544;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3225)
			{
				posX = 512;
				posY = 912;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3226)
			{
				posX = 528;
				posY = 912;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3227)
			{
				posX = 544;
				posY = 912;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3228)
			{
				posX = 560;
				posY = 912;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3229)
			{
				posX = 576;
				posY = 912;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3230)
			{
				posX = 592;
				posY = 912;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3231)
			{
				posX = 608;
				posY = 912;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2720)
			{
				posX = 496;
				posY = 768;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2713)
			{
				posX = 384;
				posY = 768;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2714)
			{
				posX = 400;
				posY = 768;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2715)
			{
				posX = 416;
				posY = 768;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2716)
			{
				posX = 432;
				posY = 768;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2717)
			{
				posX = 448;
				posY = 768;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2718)
			{
				posX = 464;
				posY = 768;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2719)
			{
				posX = 480;
				posY = 768;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2776)
			{
				posX = 496;
				posY = 784;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2769)
			{
				posX = 384;
				posY = 784;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2770)
			{
				posX = 400;
				posY = 784;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2771)
			{
				posX = 416;
				posY = 784;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2772)
			{
				posX = 432;
				posY = 784;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2773)
			{
				posX = 448;
				posY = 784;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2774)
			{
				posX = 464;
				posY = 784;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2775)
			{
				posX = 480;
				posY = 784;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2832)
			{
				posX = 496;
				posY = 800;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2825)
			{
				posX = 384;
				posY = 800;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2826)
			{
				posX = 400;
				posY = 800;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2827)
			{
				posX = 416;
				posY = 800;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2828)
			{
				posX = 432;
				posY = 800;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2829)
			{
				posX = 448;
				posY = 800;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2830)
			{
				posX = 464;
				posY = 800;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 2831)
			{
				posX = 480;
				posY = 800;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 6498)
			{
				posX = 16;
				posY = 1856;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 6502)
			{
				posX = 80;
				posY = 1856;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 6497)
			{
				posX = 0;
				posY = 1856;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3218)
			{
				posX = 400;
				posY = 912;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3219)
			{
				posX = 416;
				posY = 912;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3274)
			{
				posX = 400;
				posY = 928;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3275)
			{
				posX = 416;
				posY = 928;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3330)
			{
				posX = 400;
				posY = 944;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}
			else if (mapWall[row][column] == 3331)
			{
				posX = 416;
				posY = 944;
				this->wall.setTexture(this->textureSet);
				this->wall.setTextureRect(sf::IntRect(posX, posY, tileHeight, tileWidth));
			}

			this->wall.setPosition(column * tileWidth, row * tileHeight);

			myWallMap.draw(this->wall);
		}
	}
}